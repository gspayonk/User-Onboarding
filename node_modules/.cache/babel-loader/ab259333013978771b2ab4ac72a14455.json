{"ast":null,"code":"import _slicedToArray from \"/Users/Grissobel/Documents/Work/Git/User-Onboarding/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Grissobel/Documents/Work/Git/User-Onboarding/src/components/Form.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { Form, Field, withFormik } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst UserForm = ({\n  errors,\n  touched,\n  values,\n  status\n}) => {\n  console.log(props);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUser = _useState2[1];\n\n  useEffect(() => {\n    if (status) {\n      setUser([users]);\n    }\n  }, [status]);\n  return React.createElement(\"div\", {\n    className: \"user-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"User Onboarding\"), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Your Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), touched.name && errors.name && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, errors.name), React.createElement(Field, {\n    type: \"text\",\n    name: \"email\",\n    placeholder: \"Your E-mail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, errors.email), React.createElement(Field, {\n    type: \"text\",\n    name: \"password\",\n    placeholder: \"Your E-mail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, errors.email), React.createElement(\"label\", {\n    className: \"checkbox-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Terms of Service\", React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"terms\",\n    checked: values.terms,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"check-mark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Submit!\")), users.map(user => React.createElement(\"ul\", {\n    key: user.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Species: \", user.name), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Size: \", user.email))));\n};\n\nconst FormikUserForm = withFormik({\n  // object destructuring. We could do values.species but we are destructuring it so we can just put species. You see the same thing in Props a lot so instead of props.values you would see {values}\n  mapPropsToValues({\n    species,\n    size,\n    notes,\n    diet,\n    vaccinations\n  }) {\n    return {\n      vaccinations: vaccinations || false,\n      diet: diet || \"\",\n      species: species || \"\",\n      size: size || \"\",\n      notes: notes || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    species: Yup.string().required(\"You silly!!!\"),\n    size: Yup.string().required(),\n    notes: Yup.string(),\n    diet: Yup.string().oneOf([\"omnivore\", \"carnivore\", \"herbivore\"]).required(\"Please pick a diet type\")\n  }),\n\n  handleSubmit(values, {\n    setStatus\n  }) {\n    axios // values is our object with all our data on it.\n    .post(\"https://reqres.in/api/users/\", values).then(res => {\n      setStatus(res.data);\n      console.log(res);\n    }).catch(err => console.log(err.response));\n  }\n\n})(AnimalForm); // currying functions in Javascript\n\nconsole.log(\"This is the HOC\", FormikAnimalForm);\nexport default FormikUserForm;","map":{"version":3,"sources":["/Users/Grissobel/Documents/Work/Git/User-Onboarding/src/components/Form.js"],"names":["React","useState","useEffect","axios","Form","Field","withFormik","Yup","UserForm","errors","touched","values","status","console","log","props","users","setUser","name","email","terms","map","user","id","FormikUserForm","mapPropsToValues","species","size","notes","diet","vaccinations","validationSchema","object","shape","string","required","oneOf","handleSubmit","setStatus","post","then","res","data","catch","err","response","AnimalForm","FormikAnimalForm"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from \"axios\";\nimport { Form, Field, withFormik } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst UserForm = ({ errors, touched, values, status }) => {\n    \n    console.log(props);\n    const [users, setUser] = useState ([]);\n    useEffect (() =>{\n        if (status){\n            setUser([users]);\n        }\n    }, [status]);\n\n    return (\n        <div className = 'user-form'>\n            <h1>User Onboarding</h1>\n            <Form>\n\n            <Field type=\"text\" name=\"name\" placeholder=\"Your Name\" />\n        {touched.name && errors.name && (\n            <p className=\"error\">{errors.name}</p>\n        )}\n\n        <Field type=\"text\" name=\"email\" placeholder=\"Your E-mail\" />\n        {touched.email && errors.email && <p className=\"error\">{errors.email}</p>}\n\n        <Field type=\"text\" name=\"password\" placeholder=\"Your E-mail\" />\n        {touched.email && errors.email && <p className=\"error\">{errors.email}</p>}\n\n        {/* <Field component=\"select\" className=\"food-select\" name=\"diet\">\n            <option>Please Choose an Option</option>\n            <option value=\"herbivore\">Herbivore</option>\n            <option value=\"carnivore\">Carnivore</option>\n            <option value=\"omnivore\">Omnivore</option>\n        </Field>\n        {touched.diet && errors.diet && <p className=\"error\">{errors.diet}</p>} */}\n\n        <label className=\"checkbox-container\">\n            Terms of Service\n            <Field\n            type=\"checkbox\"\n            name=\"terms\"\n            checked={values.terms}\n            />\n        <span className=\"check-mark\" />\n        </label>\n\n        {/* <Field\n            component=\"textarea\"\n            type=\"text\"\n            name=\"notes\"\n            placeholder=\"Notes\"\n        />\n        {touched.notes && errors.notes && (\n            <p className=\"error\">{errors.notes}</p>\n        )} */}\n\n        <button type=\"submit\">Submit!</button>\n    </Form>\n\n    {users.map(user => (\n        <ul key={user.id}>\n            <li>Species: {user.name}</li>\n            <li>Size: {user.email}</li>\n        \n        </ul>\n    ))}\n\n\n        </div>\n    );\n    };\n\n\n    const FormikUserForm = withFormik({\n        // object destructuring. We could do values.species but we are destructuring it so we can just put species. You see the same thing in Props a lot so instead of props.values you would see {values}\n        mapPropsToValues({ species, size, notes, diet, vaccinations }) {\n        return {\n            vaccinations: vaccinations || false,\n            diet: diet || \"\",\n            species: species || \"\",\n            size: size || \"\",\n            notes: notes || \"\"\n        };\n        },\n\n        validationSchema: Yup.object().shape({\n            species: Yup.string().required(\"You silly!!!\"),\n            size: Yup.string().required(),\n            notes: Yup.string(),\n            diet: Yup.string()\n            .oneOf([\"omnivore\", \"carnivore\", \"herbivore\"])\n            .required(\"Please pick a diet type\")\n        }),\n    \n        handleSubmit(values, { setStatus }) {\n        axios\n            // values is our object with all our data on it.\n            .post(\"https://reqres.in/api/users/\", values)\n            .then(res => {\n                setStatus(res.data);\n                console.log(res);\n            })\n            .catch(err => console.log(err.response));\n        }\n      })(AnimalForm); // currying functions in Javascript\n        console.log(\"This is the HOC\", FormikAnimalForm);\n\n    export default FormikUserForm;"]},"metadata":{},"sourceType":"module"}